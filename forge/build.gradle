plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

architectury {
    platformSetupLoomIde()
    forge()
}
loom {
    forge {
        mixinConfig "iammusicplayer.mixins.json"
    }
}
configurations {
    common
    shadowCommon
    implementation.extendsFrom(shadowCommon)
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}
minecraft {
    runs {
        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
    }
}
dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modApi "me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}"

    modImplementation("pre.dev.felnull:otyacraftengine-forge:${rootProject.oe_version}") {
        transitive = false
    }

    common(project(path: ":common", configuration: "dev")) {
        transitive = false
    }

    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) {
        transitive = false
    }

    forgeDependencies('com.sedmelluq:lavaplayer:1.3.78') {
        transitive = false
    }
    forgeDependencies('com.sedmelluq:lava-common:1.1.2') {
        transitive = false
    }
    forgeDependencies('org.apache.httpcomponents:httpclient:4.5.13')
    forgeDependencies('com.fasterxml.jackson.core:jackson-core:2.13.0')
    forgeDependencies('com.fasterxml.jackson.core:jackson-databind:2.13.0')
    forgeDependencies(implementation('com.sedmelluq:lavaplayer-natives:1.3.14'))
    forgeDependencies('commons-io:commons-io:2.6')
    forgeDependencies('org.jsoup:jsoup:1.12.1')
    forgeDependencies('net.iharder:base64:2.3.9')
    //forgeDependencies group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha5'

    shadowCommon('com.sedmelluq:lavaplayer:1.3.78') {
        transitive = false
    }
    shadowCommon('com.sedmelluq:lava-common:1.1.2') {
        transitive = false
    }
    shadowCommon('org.apache.httpcomponents:httpclient:4.5.13')
    shadowCommon('com.fasterxml.jackson.core:jackson-core:2.13.0')
    shadowCommon('com.fasterxml.jackson.core:jackson-databind:2.13.0')
    shadowCommon('com.sedmelluq:lavaplayer-natives:1.3.14')
    shadowCommon('commons-io:commons-io:2.6')
    shadowCommon('org.jsoup:jsoup:1.12.1')
    shadowCommon('net.iharder:base64:2.3.9')
    //  shadowCommon group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha5'

    forgeDependencies 'com.github.sealedtx:java-youtube-downloader:3.0.2'
    shadowCommon 'com.github.sealedtx:java-youtube-downloader:3.0.2'

    forgeDependencies "dev.felnull:felnull-java-library:${rootProject.felnull_version}"
    shadowCommon "dev.felnull:felnull-java-library:${rootProject.felnull_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"

    // relocate 'org.slf4j', 'dev.felnull.imp.libs.org.slf4j'
    relocate 'certificates', 'dev.felnull.imp.libs.certificates'
    relocate 'com.fasterxml', 'dev.felnull.imp.libs.com.fasterxml'
    relocate 'org.jsoup', 'dev.felnull.imp.libs.org.jsoup'
    relocate 'natives', 'dev.felnull.imp.libs.natives'
    relocate 'mozilla', 'dev.felnull.imp.libs.mozilla'
    relocate 'net.iharder', 'dev.felnull.imp.libs.net.iharder'
    relocate 'com.sedmelluq.lava', 'dev.felnull.imp.libs.com.sedmelluq.lava'
    relocate 'org.apache.commons', 'dev.felnull.imp.libs.org.apache.commons'
    relocate 'org.apache.http', 'dev.felnull.imp.libs.org.apache.http'
    relocate 'com.github', 'dev.felnull.imp.libs.com.github'
    relocate 'com.alibaba', 'dev.felnull.imp.libs.com.alibaba'
    relocate 'dev.felnull.fnjl', 'dev.felnull.imp.libs.dev.felnull.fnjl'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    repositories {

    }
}

repositories {
    mavenCentral()
}
