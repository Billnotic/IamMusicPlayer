plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon
    shadowIn
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    forgeDependencies.extendsFrom shadowIn
    shadowCommon.extendsFrom shadowIn
}
loom {
    forge {
        mixinConfig "iammusicplayer.mixins.json"
    }
}
dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modImplementation("pre.dev.felnull:otyacraftengine-forge:${rootProject.oe_version}") {
        transitive = false
    }

    modApi "me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}"

    //shadowIn("com.sedmelluq:lavaplayer:${rootProject.lava_version}") { transitive = false }
    shadowIn('com.github.sedmelluq:lavaplayer:PR650-SNAPSHOT') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    shadowIn 'com.github.sealedtx:java-youtube-downloader:3.0.2'
    shadowIn "dev.felnull:felnull-java-library:${rootProject.felnull_version}"
    shadowIn 'org.jsoup:jsoup:1.14.3'
    shadowIn 'com.mpatric:mp3agic:0.9.1'
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}
shadowJar {
    configurations = [project.configurations.shadowIn]
    relocate 'certificates', 'dev.felnull.imp.libs.certificates'
    relocate 'com.fasterxml', 'dev.felnull.imp.libs.com.fasterxml'
    relocate 'org.jsoup', 'dev.felnull.imp.libs.org.jsoup'
    relocate 'natives', 'dev.felnull.imp.libs.natives'
    relocate 'mozilla', 'dev.felnull.imp.libs.mozilla'
    relocate 'net.iharder', 'dev.felnull.imp.libs.net.iharder'
    relocate 'com.sedmelluq.lava', 'dev.felnull.imp.libs.com.sedmelluq.lava'
    relocate 'org.apache.http', 'dev.felnull.imp.libs.org.apache.http'
    relocate('org.apache.commons', 'dev.felnull.imp.libs.org.apache.commons') {
        include 'org.apache.commons.logging.**'
        include 'org.apache.commons.io.**'
        include 'org.apache.commons.codec.**'
    }
    relocate 'com.github', 'dev.felnull.imp.libs.com.github'
    relocate 'com.alibaba', 'dev.felnull.imp.libs.com.alibaba'
    relocate 'dev.felnull.fnjl', 'dev.felnull.imp.libs.dev.felnull.fnjl'
    relocate 'com.mpatric', 'dev.felnull.imp.libs.com.mpatric'
    relocate ('com.sedmelluq.discord.lavaplayer', 'dev.felnull.imp.libs.com.sedmelluq.discord.lavaplayer'){
        exclude  'com.sedmelluq.discord.lavaplayer.natives.**'
    }
}
shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName = "${rootProject.archives_base_name}-${project.name}"
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }


    repositories {

    }
}
